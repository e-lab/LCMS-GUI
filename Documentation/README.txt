=================================
Documenting e-Lab C++ Source Code
=================================

The entry point into the web documentation is from the file "html/index.html".

The HTML files in the html directory were generated by Doxygen, a documentation
generation system. The documentation is extracted directly from the sources,
which makes it much easier to keep the documentation consistent with the source 
code.


There is an excellent Doxygen manual at the Doxygen site:

http://www.stack.nl/~dimitri/doxygen/manual.html


The following notes pertain to the use of Doxygen within the e-Lab source code
and was written in the hope that a consistent style and syntax would be
mantained after modification.  Please note that much of the first version of
this README was taken from the documentation section of the 'Drupal Coding
Standard' which can be found at:

http://drupal.org/node/1354



--------------------
Doxgyen Configuation
--------------------

The configuation of Doxgyen is set from its configuation file "Doxyfile".  A
default config file can be generated by running the following command from the
command line:


> doxygen -g


The following modificatins were then made to the default configuration:-


FULL_PATH_NAMES = NO


JAVADOC_AUTOBRIEF = YES

Because we use Cammel-Case in file names the following Doxygen configuration is
set:

CASE_SENSE_NAMES = YES


If GraphViz is installed the following config option will use it to generate
diagrams for the documentation.

HAVE_DOT = YES 


Produces entries in the API even if the class etc. is undocumented.
EXTRACT_ALL = YES (maybe)


EXTRACT_PRIVATE = YES


EXCLUDE_PATTERNS = mathplot.*



----------------------------
General Documentation Syntax
----------------------------

To document a block of code, the syntax to be used is:


	/**
	 * Documentation here.
	 */


Doxygen will parse any comments located in such a block. Our style is to use as
few Doxygen-specific commands as possible, so as to keep the source legible. Any
mentions of functions or file names within the documentation will automatically
link to the referenced code, so typically no markup need be introduced to
produce links.


This style of commenting is the same as JavaDoc-style comments.  The first line
(until the first dot) is interpreted as a brief description, but only if the
configeration file was changed.



-----------------
Documenting files
-----------------

It is good practice to provide a comment describing what a .cpp file contains at
the start of it.  For example:



	/**
	 * @file
	 * The Graphing System.
	 *
	 * This file contains both the PlotData and PlotPanel classes, which
	 * taken together make up the classes needed to display the data
	 * generated by the Device class.
	 */


The line immediately following the @file directive is a short description that
will be shown in the list of all files in the generated documentation. If the
line begins with a verb, that verb should be in present tense, e.g., "Handles
file uploads." Further description may follow after a blank line.



-------------------
Documenting classes
-------------------

How classes get documented.


	/**
	 * Panel upon which the e-Lab logo is drawn.
	 *
	 * This class currently uses a 'xpm' version of the e-Lab logo which
	 * gets compiled into the binary.  While this may make the final
	 * executable slightly larger it has the benefit that there are fewer
	 * external files needed at run time.
	 */



---------------------
Documenting functions
---------------------

All functions that may be called by other files (classes) should be documented;
private functions optionally may be documented and is highly recomended that
they are. A function documentation block should immediately precede the
declaration of the function itself, like so:



	/**
	 * Request the next pair of x/y coordinates.
	 *
	 * This class acts as an iterator over the data arrays with the first
	 * call of this function accessing the first x/y coordinate pair and
	 * each subsequent call accessing the next pair in order.  The boolean
	 * returned indicates if the end of the arrays have been reached.
	 * 
	 * @param x
	 *   Reference to the variable into which the next X-coordinate is to
	 *   be written.
	 * @param y
	 *   Reference to the variable into which the next Y-coordinate is to
	 *   be written.
	 * @retval TRUE
	 *   If there is more data to collect.
	 * @retval FALSE
	 *   When the end of the data array have been reached.
	 */
	bool GetNextXY(double&, double&);


The first line of the block should contain a brief description of what the
function does, beginning with a verb in the form "Do such and such" (rather
than "Does such and such").

If unshore if your brief statment is correnct read it with "I want to" before
it and if it fits than it is correct.  A longer description with usage notes may
follow after a blank line. Each parameter should be listed with a @param
directive, with a description indented on the following line. After all the
parameters, a @return directive should be used to document the return value if
there is one. There is no blank line between the @param and @return directives.
Functions that are easily described in one line may omit these directives, as
follows:


	/**
	 * Reset the bias control panel to its default state.
	 */
	void ResetBias();


The parameters and return value must be described within this one-line
description in this case.




